Description: >
    Capstone Project: this script deploys 2 servers in a private network to run a Kubernetes Cluster.
    A bastion host is running in a pulic network to allow secure SSH access to the 2 Kube nodes.

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    NodeInstanceType:
      AllowedValues:
        - t2.nano
        - t2.micro
        - t2.small
        - t2.medium
        - t2.large
        - t3.micro
        - t3.small
        - t3.medium
        - t3.large
        - t3.xlarge
        - t3.2xlarge
        - m3.large
        - m3.xlarge
        - m3.2xlarge
        - m4.large
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
      Default: t2.micro
      Description: Amazon EC2 instance type for the kubernetes Node instances.
      Type: String
    KeyPairName:
        Description: Key pair name used to access the Bastion Host
        Type: String
    RemoteAccessCIDR:
        Description: Remote CIDR allowed to access Bastion Hosts 
        Type: String
    NumNodeHosts:
        Description: Number of Nodes
        Type: String
        

Resources:


  NodesSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        #CidrIp: 0.0.0.0/0
        CidrIp: !Ref RemoteAccessCIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  
  MasterInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-003634241a8fcdec0
      KeyName: !Ref KeyPairName
      InstanceType: !Ref NodeInstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: NodesSecGroup
          SubnetId: 
            Fn::ImportValue: 
              !Sub "${EnvironmentName}-PUB1-SN" 
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          apt-get update
          apt-get install -y apt-transport-https
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add
          cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
          deb http://apt.kubernetes.io/ kubernetes-xenial main
          EOF
          apt-get update
          apt-get install -y docker.io
          apt-get install -y kubelet kubeadm kubectl kubernetes-cni
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '10'   

  SlaveInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-003634241a8fcdec0
      KeyName: !Ref KeyPairName
      InstanceType: !Ref NodeInstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: NodesSecGroup
          SubnetId: 
            Fn::ImportValue: 
              !Sub "${EnvironmentName}-PUB1-SN" 
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          apt-get update
          apt-get install -y apt-transport-https
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add
          cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
          deb http://apt.kubernetes.io/ kubernetes-xenial main
          EOF
          apt-get update
          apt-get install -y docker.io
          apt-get install -y kubelet kubeadm kubectl kubernetes-cni
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '10'    

Outputs: 

  MasterIP:
    Description: The IP of the Master Node host
    Value: !GetAtt MasterInstance.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-MasterNodeIP

  Slave1IP:
    Description: The IP of the Slave1 Node host
    Value: !GetAtt SlaveInstance.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-SlaveNode1IP

    
    

